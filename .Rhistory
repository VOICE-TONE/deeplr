column.name = NULL,
source.lang = "DE",
target.lang = "EN",
auth_key = NULL,
url = "https://api.deepl.com/v1/translate?text="
) {
if(is.null(auth_key)){cat("You need an API key. See https://www.deepl.com/api-contact.html.")}else{
if(source.lang=="detect"){cat("\n Detecting the source language. \n\n \n")}
cat("", sep="\n\n")
# INPUT: Dataframe with text in column ####
if(inherits(dataset,"data.frame")==TRUE&!is.null(column.name)){
dataset2 <- dataset %>% dplyr::pull(column.name) %>% as.character()
responses <- NULL
languages <- NULL
z <- 0
for(i in dataset2){
svMisc::progress(z, max.value = length(dataset2))
z <- z+1
i <- stringr::str_replace(gsub("\\s+", "%20", stringr::str_trim(i)), "B", "b")
# Source language: "detect" vs. "X"
if(source.lang=="detect"){
response.i <- httr::GET(paste(url,
i,
"&target_lang=", target.lang,
"&auth_key=", auth_key
, sep = ""))
}else{
response.i <- httr::GET(paste(url,
i,
"&source_lang=", source.lang,
"&target_lang=", target.lang,
"&auth_key=", auth_key
, sep = ""))
}
respcontent.i <- httr::content(response.i, as="text", encoding = "UTF-8")
#print(respcontent.i)
result.i <- jsonlite::fromJSON(respcontent.i)$translations$text
# Source language: "detect" vs. "X"
if(source.lang == "detect"){
source.lang.i <- jsonlite::fromJSON(respcontent.i)$translations$detected_source_language
}else{
source.lang.i <- jsonlite::fromJSON(respcontent.i)$translations$detected_source_language
}
#print(result.i)
responses <- c(responses, result.i)
#print(responses)
languages <- c(languages, source.lang.i)
}
column.name.new <- paste0(column.name, "_", target.lang)
dataset <- dplyr::bind_cols(dataset, newtranslation = responses, source_lang = languages)
names(dataset)[names(dataset)=="newtranslation"] <- column.name.new
return(dataset)
}
if(inherits(dataset,"data.frame")==TRUE&is.null(column.name)){cat("If input is a data.frame you have to specify a column name, e.g. translate(dataset = dat, column.name = 'text'.")}
if(inherits(dataset,"data.frame")==FALSE){cat("The input is not of class() dataframe.")}
} # API KEY
} # End of function
dat <- data.frame(text = c("La seule facon de savoir ce qui se passe est de perturber le systeme.",
"The whole problem with the world is that fools are always so certain of themselves"))
translate_df(dataset = dat,
column.name = "text",
source.lang = "detect",
target.lang = "DE",
auth_key = "cee9e295-5993-5dab-50ac-600876fb44c6")
translate_df <- function(dataset = NULL,
column.name = NULL,
source.lang = "DE",
target.lang = "EN",
auth_key = NULL,
url = "https://api.deepl.com/v1/translate?text="
) {
if(is.null(auth_key)){cat("You need an API key. See https://www.deepl.com/api-contact.html.")}else{
# INPUT: Dataframe with text in column ####
if(inherits(dataset,"data.frame")==TRUE&!is.null(column.name)){
dataset2 <- dataset %>% dplyr::pull(column.name) %>% as.character()
responses <- NULL
languages <- NULL
z <- 0
for(i in dataset2){
svMisc::progress(z, max.value = length(dataset2))
z <- z+1
i <- stringr::str_replace(gsub("\\s+", "%20", stringr::str_trim(i)), "B", "b")
# Source language: "detect" vs. "X"
if(source.lang=="detect"){
response.i <- httr::GET(paste(url,
i,
"&target_lang=", target.lang,
"&auth_key=", auth_key
, sep = ""))
}else{
response.i <- httr::GET(paste(url,
i,
"&source_lang=", source.lang,
"&target_lang=", target.lang,
"&auth_key=", auth_key
, sep = ""))
}
respcontent.i <- httr::content(response.i, as="text", encoding = "UTF-8")
#print(respcontent.i)
result.i <- jsonlite::fromJSON(respcontent.i)$translations$text
# Source language: "detect" vs. "X"
if(source.lang == "detect"){
source.lang.i <- jsonlite::fromJSON(respcontent.i)$translations$detected_source_language
}else{
source.lang.i <- jsonlite::fromJSON(respcontent.i)$translations$detected_source_language
}
#print(result.i)
responses <- c(responses, result.i)
#print(responses)
languages <- c(languages, source.lang.i)
}
column.name.new <- paste0(column.name, "_", target.lang)
dataset <- dplyr::bind_cols(dataset, newtranslation = responses, source_lang = languages)
names(dataset)[names(dataset)=="newtranslation"] <- column.name.new
return(dataset)
}
if(inherits(dataset,"data.frame")==TRUE&is.null(column.name)){cat("If input is a data.frame you have to specify a column name, e.g. translate(dataset = dat, column.name = 'text'.")}
if(inherits(dataset,"data.frame")==FALSE){cat("The input is not of class() dataframe.")}
} # API KEY
} # End of function
dat <- data.frame(text = c("La seule facon de savoir ce qui se passe est de perturber le systeme.",
"The whole problem with the world is that fools are always so certain of themselves"))
translate_df(dataset = dat,
column.name = "text",
source.lang = "detect",
target.lang = "DE",
auth_key = "cee9e295-5993-5dab-50ac-600876fb44c6")
dat <- data.frame(text = c("A dog.",
"Un chien.",
"Un perro.",
"Un cane.",
"Een hond."))
translate_df(dataset = dat,
column.name = "text",
source.lang = "detect",
target.lang = "DE",
auth_key = "cee9e295-5993-5dab-50ac-600876fb44c6")
translate_df <- function(dataset = NULL,
column.name = NULL,
source.lang = "DE",
target.lang = "EN",
auth_key = NULL,
url = "https://api.deepl.com/v1/translate?text="
) {
if(is.null(auth_key)){cat("You need an API key. See https://www.deepl.com/api-contact.html.")}else{
# INPUT: Dataframe with text in column ####
if(inherits(dataset,"data.frame")==TRUE&!is.null(column.name)){
dataset2 <- dataset %>% dplyr::pull(column.name) %>% as.character()
responses <- NULL
languages <- NULL
z <- 0
for(i in dataset2){
svMisc::progress(z, max.value = length(dataset2))
z <- z+1
i <- stringr::str_replace(gsub("\\s+", "%20", stringr::str_trim(i)), "B", "b")
# Source language: "detect" vs. "X"
if(source.lang=="detect"){
response.i <- httr::GET(paste(url,
i,
"&target_lang=", target.lang,
"&auth_key=", auth_key
, sep = ""))
}else{
response.i <- httr::GET(paste(url,
i,
"&source_lang=", source.lang,
"&target_lang=", target.lang,
"&auth_key=", auth_key
, sep = ""))
}
respcontent.i <- httr::content(response.i, as="text", encoding = "UTF-8")
#print(respcontent.i)
result.i <- jsonlite::fromJSON(respcontent.i)$translations$text
# Source language: "detect" vs. "X"
if(source.lang == "detect"){
source.lang.i <- jsonlite::fromJSON(respcontent.i)$translations$detected_source_language
}else{
source.lang.i <- jsonlite::fromJSON(respcontent.i)$translations$detected_source_language
}
#print(result.i)
responses <- c(responses, result.i)
#print(responses)
languages <- c(languages, source.lang.i)
}
column.name.new <- paste0(column.name, "_", target.lang)
dataset <- dplyr::bind_cols(dataset, newtranslation = responses, source_lang = languages)
names(dataset)[names(dataset)=="newtranslation"] <- column.name.new
return(dataset)
}else{
cat("The input is not of class() dataframe or you forgot to specify the name of the column that shall be translated.")
}
} # API KEY
} # End of function
translate_df(dataset = dat,
column.name = "text",
source.lang = "detect",
target.lang = "DE",
auth_key = "cee9e295-5993-5dab-50ac-600876fb44c6")
data <- "lala"
dat <- "lala"
translate_df(dataset = dat,
column.name = "text",
source.lang = "detect",
target.lang = "DE",
auth_key = "cee9e295-5993-5dab-50ac-600876fb44c6")
translate_vec <- function(dataset = NULL,
source.lang = "DE",
target.lang = "EN",
auth_key = NULL,
url = "https://api.deepl.com/v1/translate?text="
) {
if(is.null(auth_key)){cat("You need an API key. See https://www.deepl.com/api-contact.html.")}else{
if(inherits(dataset,"character")==TRUE&length(dataset)>1){
responses <- NULL
languages <- NULL
z <- 0
for(i in dataset){
svMisc::progress(z, max.value = length(dataset))
z <- z+1
i <- stringr::str_replace(gsub("\\s+", "%20", stringr::str_trim(i)), "B", "b")
# Source language: "detect" vs. "X"
if(source.lang=="detect"){
response.i <- httr::GET(paste(url,
i,
"&target_lang=", target.lang,
"&auth_key=", auth_key
, sep = ""))
}else{
response.i <- httr::GET(paste(url,
i,
"&source_lang=", source.lang,
"&target_lang=", target.lang,
"&auth_key=", auth_key
, sep = ""))
}
respcontent.i <- httr::content(response.i, as="text", encoding = "UTF-8")
result.i <- jsonlite::fromJSON(respcontent.i)$translations$text
responses <- c(responses, result.i)
# Source language: "detect" vs. "X"
if(source.lang == "detect"){
source.lang.i <- jsonlite::fromJSON(respcontent.i)$translations$detected_source_language
}else{
source.lang.i <- jsonlite::fromJSON(respcontent.i)$translations$detected_source_language
}
languages <- c(languages, source.lang.i)
}
return(responses)
return(languages)
}else{
cat("The input is not a character vector of length > 1.")
}
} # API KEY
} # End of function
library(deeplr)
library(deeplr)
?deeplr::translate_vec
dat <- c("A dog.",
"Un chien.",
"Un perro.",
"Un cane.",
"Een hond.")
translate_vec(dataset = dat,
column.name = "text",
source.lang = "detect",
target.lang = "DE",
auth_key = "cee9e295-5993-5dab-50ac-600876fb44c6")
translate_vec(dataset = dat,
source.lang = "detect",
target.lang = "DE",
auth_key = "cee9e295-5993-5dab-50ac-600876fb44c6")
x < translate_vec(dataset = dat,
source.lang = "detect",
target.lang = "DE",
auth_key = "cee9e295-5993-5dab-50ac-600876fb44c6")
x <- translate_vec(dataset = dat,
source.lang = "detect",
target.lang = "DE",
auth_key = "cee9e295-5993-5dab-50ac-600876fb44c6")
x
x <- translate_vec(dataset = dat,
source.lang = "EN",
target.lang = "DE",
auth_key = "cee9e295-5993-5dab-50ac-600876fb44c6")
x
translate_vec <- function(dataset = NULL,
source.lang = "DE",
target.lang = "EN",
auth_key = NULL,
url = "https://api.deepl.com/v1/translate?text="
) {
if(is.null(auth_key)){cat("You need an API key. See https://www.deepl.com/api-contact.html.")}else{
if(inherits(dataset,"character")==TRUE&length(dataset)>1){
responses <- NULL
languages <- NULL
z <- 0
for(i in dataset){
svMisc::progress(z, max.value = length(dataset))
z <- z+1
i <- stringr::str_replace(gsub("\\s+", "%20", stringr::str_trim(i)), "B", "b")
# Source language: "detect" vs. "X"
if(source.lang=="detect"){
response.i <- httr::GET(paste(url,
i,
"&target_lang=", target.lang,
"&auth_key=", auth_key
, sep = ""))
}else{
response.i <- httr::GET(paste(url,
i,
"&source_lang=", source.lang,
"&target_lang=", target.lang,
"&auth_key=", auth_key
, sep = ""))
}
respcontent.i <- httr::content(response.i, as="text", encoding = "UTF-8")
result.i <- jsonlite::fromJSON(respcontent.i)$translations$text
responses <- c(responses, result.i)
# Source language: "detect" vs. "X"
if(source.lang == "detect"){
source.lang.i <- jsonlite::fromJSON(respcontent.i)$translations$detected_source_language
}else{
source.lang.i <- jsonlite::fromJSON(respcontent.i)$translations$detected_source_language
}
languages <- c(languages, source.lang.i)
print(languages)
}
return(responses)
return(languages)
}else{
cat("The input is not a character vector of length > 1.")
}
} # API KEY
} # End of function
x <- translate_vec(dataset = dat,
source.lang = "EN",
target.lang = "DE",
auth_key = "cee9e295-5993-5dab-50ac-600876fb44c6")
translate_vec <- function(dataset = NULL,
source.lang = "DE",
target.lang = "EN",
auth_key = NULL,
url = "https://api.deepl.com/v1/translate?text="
) {
if(is.null(auth_key)){cat("You need an API key. See https://www.deepl.com/api-contact.html.")}else{
if(inherits(dataset,"character")==TRUE&length(dataset)>1){
responses <- NULL
languages <- NULL
z <- 0
for(i in dataset){
svMisc::progress(z, max.value = length(dataset))
z <- z+1
i <- stringr::str_replace(gsub("\\s+", "%20", stringr::str_trim(i)), "B", "b")
# Source language: "detect" vs. "X"
if(source.lang=="detect"){
response.i <- httr::GET(paste(url,
i,
"&target_lang=", target.lang,
"&auth_key=", auth_key
, sep = ""))
}else{
response.i <- httr::GET(paste(url,
i,
"&source_lang=", source.lang,
"&target_lang=", target.lang,
"&auth_key=", auth_key
, sep = ""))
}
respcontent.i <- httr::content(response.i, as="text", encoding = "UTF-8")
result.i <- jsonlite::fromJSON(respcontent.i)$translations$text
responses <- c(responses, result.i)
# Source language: "detect" vs. "X"
if(source.lang == "detect"){
source.lang.i <- jsonlite::fromJSON(respcontent.i)$translations$detected_source_language
}else{
source.lang.i <- jsonlite::fromJSON(respcontent.i)$translations$detected_source_language
}
languages <- c(languages, source.lang.i)
print(languages)
}
# OUPUT
if(source.lang == "detect"){
return(rbind(responses, languages))
}else{
return(responses)
}
}else{
cat("The input is not a character vector of length > 1.")
}
} # API KEY
} # End of function
translate_vec(dataset = dat,
source.lang = "EN",
target.lang = "DE",
auth_key = "cee9e295-5993-5dab-50ac-600876fb44c6")
translate_vec <- function(dataset = NULL,
source.lang = "DE",
target.lang = "EN",
auth_key = NULL,
url = "https://api.deepl.com/v1/translate?text="
) {
if(is.null(auth_key)){cat("You need an API key. See https://www.deepl.com/api-contact.html.")}else{
if(inherits(dataset,"character")==TRUE&length(dataset)>1){
responses <- NULL
languages <- NULL
z <- 0
for(i in dataset){
svMisc::progress(z, max.value = length(dataset))
z <- z+1
i <- stringr::str_replace(gsub("\\s+", "%20", stringr::str_trim(i)), "B", "b")
# Source language: "detect" vs. "X"
if(source.lang=="detect"){
response.i <- httr::GET(paste(url,
i,
"&target_lang=", target.lang,
"&auth_key=", auth_key
, sep = ""))
}else{
response.i <- httr::GET(paste(url,
i,
"&source_lang=", source.lang,
"&target_lang=", target.lang,
"&auth_key=", auth_key
, sep = ""))
}
respcontent.i <- httr::content(response.i, as="text", encoding = "UTF-8")
result.i <- jsonlite::fromJSON(respcontent.i)$translations$text
responses <- c(responses, result.i)
# Source language: "detect" vs. "X"
if(source.lang == "detect"){
source.lang.i <- jsonlite::fromJSON(respcontent.i)$translations$detected_source_language
}else{
source.lang.i <- jsonlite::fromJSON(respcontent.i)$translations$detected_source_language
}
languages <- c(languages, source.lang.i)
}
# OUPUT
if(source.lang == "detect"){
return(rbind(responses, languages))
}else{
return(responses)
}
}else{
cat("The input is not a character vector of length > 1.")
}
} # API KEY
} # End of function
translate_vec(dataset = dat,
source.lang = "EN",
target.lang = "DE",
auth_key = "cee9e295-5993-5dab-50ac-600876fb44c6")
translate_vec(dataset = dat,
source.lang = "detect",
target.lang = "DE",
auth_key = "cee9e295-5993-5dab-50ac-600876fb44c6")
translate_vec <- function(dataset = NULL,
source.lang = "DE",
target.lang = "EN",
auth_key = NULL,
url = "https://api.deepl.com/v1/translate?text="
) {
if(is.null(auth_key)){cat("You need an API key. See https://www.deepl.com/api-contact.html.")}else{
if(inherits(dataset,"character")==TRUE&length(dataset)>1){
responses <- NULL
languages <- NULL
z <- 0
for(i in dataset){
svMisc::progress(z, max.value = length(dataset))
z <- z+1
i <- stringr::str_replace(gsub("\\s+", "%20", stringr::str_trim(i)), "B", "b")
# Source language: "detect" vs. "X"
if(source.lang=="detect"){
response.i <- httr::GET(paste(url,
i,
"&target_lang=", target.lang,
"&auth_key=", auth_key
, sep = ""))
}else{
response.i <- httr::GET(paste(url,
i,
"&source_lang=", source.lang,
"&target_lang=", target.lang,
"&auth_key=", auth_key
, sep = ""))
}
respcontent.i <- httr::content(response.i, as="text", encoding = "UTF-8")
result.i <- jsonlite::fromJSON(respcontent.i)$translations$text
responses <- c(responses, result.i)
# Source language: "detect" vs. "X"
if(source.lang == "detect"){
source.lang.i <- jsonlite::fromJSON(respcontent.i)$translations$detected_source_language
}else{
source.lang.i <- jsonlite::fromJSON(respcontent.i)$translations$detected_source_language
}
languages <- c(languages, source.lang.i)
}
# OUPUT
if(source.lang == "detect"){
return(cbind(responses, languages))
}else{
return(responses)
}
}else{
cat("The input is not a character vector of length > 1.")
}
} # API KEY
} # End of function
translate_vec(dataset = dat,
source.lang = "detect",
target.lang = "DE",
auth_key = "cee9e295-5993-5dab-50ac-600876fb44c6")
library(deeplr)
library(deeplr)
